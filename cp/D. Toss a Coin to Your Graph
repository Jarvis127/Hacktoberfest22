Problemm : 

One day Masha was walking in the park and found a graph under a tree... Surprised? Did you think that this problem would have some logical and reasoned story? No way! So, the problem...

Masha has an oriented graph which i-th vertex contains some positive integer ai. Initially Masha can put a coin at some vertex. In one operation she can move a coin placed in some vertex u to any other vertex v such that there is an oriented edge u→v in the graph. Each time when the coin is placed in some vertex i, Masha write down an integer ai in her notebook (in particular, when Masha initially puts a coin at some vertex, she writes an integer written at this vertex in her notebook). Masha wants to make exactly k−1 operations in such way that the maximum number written in her notebook is as small as possible.

Input
The first line contains three integers n, m and k (1≤n≤2⋅105, 0≤m≤2⋅105, 1≤k≤1018) — the number of vertices and edges in the graph, and the number of operation that Masha should make.

The second line contains n integers ai (1≤ai≤109) — the numbers written in graph vertices.

Each of the following m lines contains two integers u and v (1≤u≠v≤n) — it means that there is an edge u→v in the graph.

It's guaranteed that graph doesn't contain loops and multi-edges.

Output
Print one integer — the minimum value of the maximum number that Masha wrote in her notebook during optimal coin movements.

If Masha won't be able to perform k−1 operations, print −1.


Solution in Java : 



import java.util.*;
import java.lang.*;
import java.io.*;


public class Solution {

    static int MAX = 200005, INF = (int) 1e9 + 7;
    static List<Integer>[] graph = new List[MAX];

    static int[] valuesWritten = new int[MAX];
    static int[] dp = new int[MAX];
    static int[] visited = new int[MAX];

    static boolean cycleFound = false;
    static int n, m;
    static long k;

    public static void main(String[] args) throws java.lang.Exception {
        out = new PrintWriter(new BufferedOutputStream(System.out));
        sc = new FastReader();

        int test = 1;
        for (int t = 1; t <= test; t++) {
            solve();
        }
        out.close();
    }

    private static void solve() {
        n = sc.nextInt();
        m = sc.nextInt();
        k = sc.nextLong();

        for (int i = 0; i < n; i++) {
            valuesWritten[i] = sc.nextInt();
        }

        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }

        for (int i = 0; i < m; i++) {
            int u = sc.nextInt() - 1;
            int v = sc.nextInt() - 1;
            graph[u].add(v);
        }

        int minValueOnNoteBook = binarySearch();
        out.println(minValueOnNoteBook);
    }

    private static int binarySearch() {
        int low = 1, high = INF;
        int minValueOnNoteBook = -1;
        while (low <= high) {
            int mid = (low + high) >> 1;
            cycleFound = false;
            if (canFindAPath(mid)) {
                minValueOnNoteBook = mid;
                high = mid - 1;
            }else {
                low = mid + 1;
            }
        }
        return minValueOnNoteBook;
    }

    private static boolean canFindAPath(int maxValueOnPath) { // find a path of length at least k, and whose max value vertex is <= maxValueOnPath
        for (int i = 0; i < n; i++) {
            dp[i] = visited[i] = 0;
        }

        for (int i = 0; i < n; i++) {
            if (valuesWritten[i] <= maxValueOnPath) {
                dfs(i, maxValueOnPath);
            }
        }

        int maxPathLengthFound = 0;
        for (int i = 0; i < n; i++) {
            maxPathLengthFound = Math.max(maxPathLengthFound, dp[i]);
        }
        return cycleFound || maxPathLengthFound >= k;
    }

    private static void dfs(int currNode, int maxValueOnPath) {
        visited[currNode] = 1; // in dfs
        dp[currNode] = 1;
        for (int adjacentNode : graph[currNode]) {
            if (valuesWritten[adjacentNode] > maxValueOnPath) {
                // cannot include it in our path
                continue;
            }
            if (visited[adjacentNode] == 0) {
                dfs(adjacentNode, maxValueOnPath);
                dp[currNode] = Math.max(dp[currNode], dp[adjacentNode] + 1);
            }else if (visited[adjacentNode] == 1) {
                cycleFound = true;
            }else {
                dp[currNode] = Math.max(dp[currNode], dp[adjacentNode] + 1);
            }
        }
        visited[currNode] = 2; // visited
    }


    public static FastReader sc;
    public static PrintWriter out;
    static class FastReader
    {
        BufferedReader br;
        StringTokenizer str;

        public FastReader()
        {
            br = new BufferedReader(new
                    InputStreamReader(System.in));
        }

        String next()
        {
            while (str == null || !str.hasMoreElements())
            {
                try
                {
                    str = new StringTokenizer(br.readLine());
                }
                catch (IOException  lastMonthOfVacation)
                {
                    lastMonthOfVacation.printStackTrace();
                }
            }
            return str.nextToken();
        }

        int nextInt()
        {
            return Integer.parseInt(next());
        }

        long nextLong()
        {
            return Long.parseLong(next());
        }

        double nextDouble()
        {
            return Double.parseDouble(next());
        }

        String nextLine()
        {
            String str = "";
            try
            {
                str = br.readLine();
            }
            catch (IOException lastMonthOfVacation)
            {
                lastMonthOfVacation.printStackTrace();
            }
            return str;
        }
    }

}
